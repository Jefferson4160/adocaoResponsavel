/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.lar_temporario.view;

import br.com.ifba.lar_temporario.controller.LarTemporarioIController;
import br.com.ifba.lar_temporario.entity.LarTemporario;
import jakarta.annotation.PostConstruct;
import java.awt.HeadlessException;
import java.time.LocalDateTime;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author Luan Alves
 */

@Component
public final class LarTemporarioView extends javax.swing.JFrame {
    
    @Autowired
    private LarTemporarioIController larTemporarioController;
    
    /**
     * Creates new form LarTemporarioListar
     */
    public LarTemporarioView() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    @PostConstruct
    public void init() {
        carregarTabela();
    }
    
    public void carregarTabela() {
 
        try {
            List<LarTemporario> larTemporario = larTemporarioController.findAll();
            
            System.out.println("LarTemporarios encontrados: " + larTemporario.size());

            DefaultTableModel model = (DefaultTableModel) jTableExibirLarTemporario.getModel();
            model.setRowCount(0);

            for (LarTemporario larTemporariolist : larTemporario) {
                Object[] linha = {
                    larTemporariolist.getId(),
                    larTemporariolist.getDataCadastro(),
                    larTemporariolist.isDisponivel(),
                    larTemporariolist.getObservacoes(),
                    larTemporariolist.getQuantidadeMaxAnimais(),
                    larTemporariolist.getPessoa().getId()
                };
                model.addRow(linha);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar larTemporario: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableExibirLarTemporario = new javax.swing.JTable();
        buttonAtualizarLarTemporario = new javax.swing.JToggleButton();
        buttonRemoverLarTemporario = new javax.swing.JToggleButton();
        buttonAdiconarLarTemporario = new javax.swing.JToggleButton();
        jTextFildBuscarLarTemporarioPorID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableExibirLarTemporario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data_Cadastro", "Diponibilidade", "Observações", "Qtd max.Animais", "ID Adotante"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableExibirLarTemporario);

        buttonAtualizarLarTemporario.setText("Atualizar Lar Temporario");
        buttonAtualizarLarTemporario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAtualizarLarTemporarioActionPerformed(evt);
            }
        });

        buttonRemoverLarTemporario.setText("Remover Lar Temporario");
        buttonRemoverLarTemporario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverLarTemporarioActionPerformed(evt);
            }
        });

        buttonAdiconarLarTemporario.setText("Adicionar Lar Temporario");
        buttonAdiconarLarTemporario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAdiconarLarTemporarioActionPerformed(evt);
            }
        });

        jTextFildBuscarLarTemporarioPorID.setText("Procurar por ID");
        jTextFildBuscarLarTemporarioPorID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFildBuscarLarTemporarioPorIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFildBuscarLarTemporarioPorID, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(buttonAtualizarLarTemporario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonRemoverLarTemporario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAdiconarLarTemporario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFildBuscarLarTemporarioPorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(buttonAdiconarLarTemporario, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(buttonAtualizarLarTemporario, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(buttonRemoverLarTemporario, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAtualizarLarTemporarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAtualizarLarTemporarioActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jTableExibirLarTemporario.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um lar temporário para atualizar.");
            return;
        }

        Long idLarTemporario = (Long) jTableExibirLarTemporario.getValueAt(linhaSelecionada, 0);

        try {
            LarTemporario lar = larTemporarioController.findById(idLarTemporario);
            if (lar == null) {
                JOptionPane.showMessageDialog(this, "Lar temporário não encontrado.");
                return;
            }

            // Campos de edição
            JTextField campoQuantidade = new JTextField(String.valueOf(lar.getQuantidadeMaxAnimais()));
            JTextArea campoObservacoes = new JTextArea(lar.getObservacoes(), 5, 20);
            JCheckBox checkDisponivel = new JCheckBox("Disponível", lar.isDisponivel());
            JScrollPane scrollObs = new JScrollPane(campoObservacoes);

            Object[] campos = {
                "Quantidade Máxima de Animais:", campoQuantidade,
                "Observações:", scrollObs,
                checkDisponivel
            };

            int opcao = JOptionPane.showConfirmDialog(this, campos, "Atualizar Lar Temporário", JOptionPane.OK_CANCEL_OPTION);

            if (opcao == JOptionPane.OK_OPTION) {
                lar.setQuantidadeMaxAnimais(Integer.parseInt(campoQuantidade.getText().trim()));
                lar.setObservacoes(campoObservacoes.getText().trim());
                lar.setDisponivel(checkDisponivel.isSelected());

                larTemporarioController.update(lar);

                JOptionPane.showMessageDialog(this, "Lar Temporário atualizado com sucesso!");
                carregarTabela();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonAtualizarLarTemporarioActionPerformed

    private void buttonRemoverLarTemporarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverLarTemporarioActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jTableExibirLarTemporario.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um lar temporário para excluir.");
            return;
        }

        Object valorId = jTableExibirLarTemporario.getValueAt(linhaSelecionada, 0);
        Long idLarTemporario;

        if (valorId instanceof Long) {
            idLarTemporario = (Long) valorId;
        } else if (valorId instanceof Integer) {
            idLarTemporario = ((Integer) valorId).longValue();
        } else {
            JOptionPane.showMessageDialog(this, "ID inválido.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Tem certeza que deseja excluir o lar temporário selecionado?",
            "Confirmação",
            JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            LarTemporario lar = larTemporarioController.findById(idLarTemporario);
            if (lar == null) {
                JOptionPane.showMessageDialog(this, "Lar não encontrado no banco.");
                return;
            }

            larTemporarioController.delete(lar);

            JOptionPane.showMessageDialog(this, "Lar temporário removido com sucesso!");
            carregarTabela();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir lar: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonRemoverLarTemporarioActionPerformed

    private void buttonAdiconarLarTemporarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAdiconarLarTemporarioActionPerformed
        // TODO add your handling code here:
        
            JOptionPane.showMessageDialog(this, "Para adicionar um Lar temporario é nessesario que use o ID de um Adotante."
                    + "Caso não tenha cadastrado um adotante sua operação sera invalida, ´primeiro cadastre um adotante.´");
            

            JTextField campoPessoaId = new JTextField();
            JTextField campoQuantidade = new JTextField();
            JTextArea campoObservacoes = new JTextArea(5, 20);
            JCheckBox checkDisponivel = new JCheckBox("Disponível para adoção", true);
            JScrollPane scrollObservacoes = new JScrollPane(campoObservacoes);

            Object[] campos = {
                "ID da Pessoa:", campoPessoaId,
                "Quantidade Máxima de Animais:", campoQuantidade,
                "Observações:", scrollObservacoes,
                checkDisponivel
            };

            int opcao = JOptionPane.showConfirmDialog(
                null,
                campos,
                "Adicionar Novo Lar Temporário",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
            );

            if (opcao == JOptionPane.OK_OPTION) {
                try {
                    // Validações e conversões
                    Long pessoaId = Long.parseLong(campoPessoaId.getText().trim());
                    int quantidade = Integer.parseInt(campoQuantidade.getText().trim());
                    String observacoes = campoObservacoes.getText().trim();
                    boolean disponivel = checkDisponivel.isSelected();

                    // Busca Pessoa pelo ID IMPLEMENTAÇÃO FUTURA
                    //Pessoa pessoa = larTemporarioController.findPessoaById(pessoaId); // você deve criar ou expor esse método no controller
                    //if (pessoa == null) {
                        //JOptionPane.showMessageDialog(this, "Pessoa com ID " + pessoaId + " não encontrada.", "Erro", JOptionPane.ERROR_MESSAGE);
                        //return;
                    //}

                    // Criação do LarTemporario
                    LarTemporario lar = new LarTemporario();
                    //lar.setPessoa(pessoa);
                    lar.setQuantidadeMaxAnimais(quantidade);
                    lar.setObservacoes(observacoes);
                    lar.setDisponivel(disponivel);
                    lar.setDataCadastro(LocalDateTime.now());

                    larTemporarioController.save(lar);

                    JOptionPane.showMessageDialog(this, "Lar Temporário salvo com sucesso!");
                    carregarTabela();

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "ID e quantidade devem ser números válidos.", "Erro", JOptionPane.ERROR_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Erro ao salvar Lar Temporário: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
        }


        
    }//GEN-LAST:event_buttonAdiconarLarTemporarioActionPerformed

    private void jTextFildBuscarLarTemporarioPorIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFildBuscarLarTemporarioPorIDActionPerformed
        // TODO add your handling code here:
        
         String textoBusca = jTextFildBuscarLarTemporarioPorID.getText().trim();

        if (textoBusca.isEmpty()) {
            // Se o campo estiver vazio, carrega toda a tabela normalmente
            carregarTabela();
            return;
        }

        Long idBusca = null;
        try {
            idBusca = Long.valueOf(textoBusca);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, digite um ID válido (número).");
            return;
        }

        try { 
            // Realizando busca pelas camadas
            LarTemporario larTemporario = larTemporarioController.findById(idBusca);

            DefaultTableModel model = (DefaultTableModel) jTableExibirLarTemporario.getModel();
            model.setRowCount(0); // limpa a tabela

            // verifica de o objeto é null
            if (larTemporario != null) {
                Object[] linha = {
                    larTemporario.getId(),
                    larTemporario.getDataCadastro(),
                    larTemporario.isDisponivel(),
                    larTemporario.getObservacoes(),
                    larTemporario.getQuantidadeMaxAnimais(),
                    larTemporario.getPessoa().getId()
                };
                model.addRow(linha);
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum larTemporario encontrado com o ID informado.");
                carregarTabela(); // opcional: volta a mostrar todos os larTemporario
            }

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar larTemporario: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jTextFildBuscarLarTemporarioPorIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LarTemporarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LarTemporarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LarTemporarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LarTemporarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LarTemporarioView().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton buttonAdiconarLarTemporario;
    private javax.swing.JToggleButton buttonAtualizarLarTemporario;
    private javax.swing.JToggleButton buttonRemoverLarTemporario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableExibirLarTemporario;
    private javax.swing.JTextField jTextFildBuscarLarTemporarioPorID;
    // End of variables declaration//GEN-END:variables
}
