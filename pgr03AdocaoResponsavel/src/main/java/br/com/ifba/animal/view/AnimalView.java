/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.animal.view;

import br.com.ifba.animal.controller.AnimalIController;
import br.com.ifba.animal.entity.Animal;
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author almei
 */
@Component
public class AnimalView extends javax.swing.JFrame {
    
    @Autowired
    private AnimalIController animalController;
    
  
    /**
     * Creates new form AnimalView
     */
    @Autowired
    public AnimalView() {
        initComponents();
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowOpened(java.awt.event.WindowEvent e) {
            atualizarTabela();
        }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtblTabelaAnimais = new javax.swing.JTable();
        btnAdicionarAnimal = new javax.swing.JButton();
        btnEditarAnimal = new javax.swing.JButton();
        btnRemoverAnimal = new javax.swing.JButton();
        lblTituloDaPagina = new javax.swing.JLabel();
        btnMaisDetalhes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtblTabelaAnimais.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Espécie", "Raça", "Idade", "Nome", "Gênero", "Adotado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblTabelaAnimais);

        btnAdicionarAnimal.setText("Adicionar Animal");
        btnAdicionarAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarAnimalActionPerformed(evt);
            }
        });

        btnEditarAnimal.setText("Editar Animal");
        btnEditarAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarAnimalActionPerformed(evt);
            }
        });

        btnRemoverAnimal.setText("Remover Animal");
        btnRemoverAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverAnimalActionPerformed(evt);
            }
        });

        lblTituloDaPagina.setText("ANIMAIS CADASTRADOS");

        btnMaisDetalhes.setText("Mais Detalhes");
        btnMaisDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaisDetalhesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnAdicionarAnimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditarAnimal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnRemoverAnimal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMaisDetalhes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addComponent(lblTituloDaPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTituloDaPagina, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdicionarAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditarAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoverAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnMaisDetalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarAnimalActionPerformed
    // Campos normais
    JTextField campoEspecie = new JTextField(20);
    JTextField campoRaca = new JTextField(20);
    JTextField campoGenero = new JTextField(20);
    JTextField campoNome = new JTextField(20);
    JTextField campoIdade = new JTextField(20);
    
    // Campo de descrição melhorado
    JTextArea areaDescricao = new JTextArea(3, 20); // 3 linhas de altura, 20 colunas de largura
    areaDescricao.setLineWrap(true); // Quebra de linha automática
    areaDescricao.setWrapStyleWord(true); // Quebra por palavras inteiras
    JPanel descricaoPanel = new JPanel(new BorderLayout());
    descricaoPanel.add(areaDescricao, BorderLayout.CENTER);

        // Agrupa os campos para exibição no JOptionPane
        Object[] campos = {
            "Espécie:", campoEspecie,
            "Raça:", campoRaca,
            "Gênero:", campoGenero,
            "Nome:", campoNome,
            "Idade:", campoIdade,
            "Descrição:", descricaoPanel
        };

        // Exibe o formulário para adicionar um novo animal
        int opcao = JOptionPane.showConfirmDialog(
            null,
            campos,
            "Adicionar Novo Animal",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (opcao == JOptionPane.OK_OPTION) {
            try {
                String especie = campoEspecie.getText().trim();
                String raca = campoRaca.getText().trim();
                String genero = campoGenero.getText().trim();
                String nome = campoNome.getText().trim();
                int idade = Integer.parseInt(campoIdade.getText().trim());
                String descricao = areaDescricao.getText().trim();

                if (especie.isEmpty() || raca.isEmpty() || genero.isEmpty() || nome.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Todos os campos obrigatórios devem ser preenchidos.", "Aviso", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                Animal novoAnimal = new Animal();
                novoAnimal.setEspecie(especie);
                novoAnimal.setRaca(raca);
                novoAnimal.setGenero(genero);
                novoAnimal.setNome(nome);
                novoAnimal.setIdade(idade);
                novoAnimal.setAdotado(false); // Padrão: não adotado
                novoAnimal.setDescricao(descricao);

                animalController.save(novoAnimal);

                JOptionPane.showMessageDialog(null, "Animal salvo com sucesso!");
                atualizarTabela();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Idade inválida! Informe um número inteiro.", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (HeadlessException e) {
                JOptionPane.showMessageDialog(null, "Erro ao salvar animal: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAdicionarAnimalActionPerformed

    private void btnRemoverAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverAnimalActionPerformed
        int linhaSelecionada = jtblTabelaAnimais.getSelectedRow();

       if (linhaSelecionada == -1) {
           JOptionPane.showMessageDialog(null, "Selecione um animal na tabela para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
           return;
       }

       Long id = (Long) jtblTabelaAnimais.getValueAt(linhaSelecionada, 0); // ID na primeira coluna

       int opcao = JOptionPane.showConfirmDialog(
           null, 
           "Tem certeza que deseja excluir o animal com o ID " + id + "?", 
           "Confirmar Exclusão", 
           JOptionPane.YES_NO_OPTION,
           JOptionPane.WARNING_MESSAGE
       );

       if (opcao == JOptionPane.YES_OPTION) {
           animalController.deleteById(id);
           JOptionPane.showMessageDialog(null, "Animal com o ID " + id + " excluído com sucesso!");
           atualizarTabela();
       }
    }//GEN-LAST:event_btnRemoverAnimalActionPerformed

    private void btnEditarAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarAnimalActionPerformed
        int linhaSelecionada = jtblTabelaAnimais.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um animal na tabela para editar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Long id = (Long) jtblTabelaAnimais.getValueAt(linhaSelecionada, 0);
        Animal animalParaEditar = animalController.findById(id);

        // Campos normais
        JTextField campoEspecie = new JTextField(animalParaEditar.getEspecie(), 20);
        JTextField campoRaca = new JTextField(animalParaEditar.getRaca(), 20);
        JTextField campoGenero = new JTextField(animalParaEditar.getGenero(), 20);
        JTextField campoNome = new JTextField(animalParaEditar.getNome(), 20);
        JTextField campoIdade = new JTextField(String.valueOf(animalParaEditar.getIdade()), 20);

        // Campo de descrição melhorado (apenas o texto bruto)
        JTextArea areaDescricao = new JTextArea(
            animalParaEditar.getDescricao() != null ? animalParaEditar.getDescricao() : "", 
            3, 
            20
        );
        areaDescricao.setLineWrap(true);
        areaDescricao.setWrapStyleWord(true);
        JPanel descricaoPanel = new JPanel(new BorderLayout());
        descricaoPanel.add(areaDescricao, BorderLayout.CENTER);

        Object[] campos = {
            "Espécie:", campoEspecie,
            "Raça:", campoRaca,
            "Gênero:", campoGenero,
            "Nome:", campoNome,
            "Idade:", campoIdade,
            "Descrição:", descricaoPanel
        };

        int opcao = JOptionPane.showConfirmDialog(
            null,
            campos,
            "Editar Animal",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (opcao == JOptionPane.OK_OPTION) {
            try {
                String novaEspecie = campoEspecie.getText().trim();
                String novaRaca = campoRaca.getText().trim();
                String novoGenero = campoGenero.getText().trim();
                String novoNome = campoNome.getText().trim();
                int novaIdade = Integer.parseInt(campoIdade.getText().trim());
                String novaDescricao = areaDescricao.getText().trim();

                if (novaEspecie.isEmpty() || novaRaca.isEmpty() || novoGenero.isEmpty() || novoNome.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Todos os campos obrigatórios devem ser preenchidos.", "Aviso", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                animalParaEditar.setEspecie(novaEspecie);
                animalParaEditar.setRaca(novaRaca);
                animalParaEditar.setGenero(novoGenero);
                animalParaEditar.setNome(novoNome);
                animalParaEditar.setIdade(novaIdade);
                animalParaEditar.setDescricao(novaDescricao);

                animalController.update(animalParaEditar);
                JOptionPane.showMessageDialog(null, "Animal atualizado com sucesso!");
                atualizarTabela();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Idade deve ser um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnEditarAnimalActionPerformed

    private void btnMaisDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaisDetalhesActionPerformed
         int linhaSelecionada = jtblTabelaAnimais.getSelectedRow();
    
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(
                null, 
                "Selecione um animal na tabela para ver os detalhes.", 
                "Aviso", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // Obtém o ID do animal selecionado (primeira coluna)
        Long id = (Long) jtblTabelaAnimais.getValueAt(linhaSelecionada, 0);

        // Busca o animal completo no banco de dados
        Animal animal = animalController.findById(id);

        if (animal != null) {
            // Usa o método getDescricaoFormatada() para formatar todas as informações
            String detalhes = animal.getInformacoesCompletas();

            // Exibe em um JOptionPane
            JOptionPane.showMessageDialog(
                null, 
                detalhes, 
                "Detalhes do Animal: " + animal.getNome(), 
                JOptionPane.INFORMATION_MESSAGE
            );
        } else {
            JOptionPane.showMessageDialog(
                null, 
                "Animal não encontrado!", 
                "Erro", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_btnMaisDetalhesActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnimalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnimalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnimalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnimalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AnimalView().setVisible(true);
            }
        });
    }
    
    private void atualizarTabela() {
    List<Animal> lista = animalController.findAll();
    DefaultTableModel modelo = (DefaultTableModel) jtblTabelaAnimais.getModel();
    modelo.setRowCount(0); // limpa a tabela

    for (Animal animal : lista) {
        modelo.addRow(new Object[]{
            animal.getId(),
            animal.getEspecie(),
            animal.getRaca(),
            animal.getIdade(),
            animal.getNome(),
            animal.getGenero(),
            animal.isAdotado()
        });
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarAnimal;
    private javax.swing.JButton btnEditarAnimal;
    private javax.swing.JButton btnMaisDetalhes;
    private javax.swing.JButton btnRemoverAnimal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtblTabelaAnimais;
    private javax.swing.JLabel lblTituloDaPagina;
    // End of variables declaration//GEN-END:variables
}
